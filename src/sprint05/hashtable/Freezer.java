package sprint05.hashtable;

import java.util.HashMap;
import java.util.Map;

public class Freezer {
    public static void main(String[] args) {
        Map<String, Integer> food = new HashMap<>();

        // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–¥—É–∫—Ç—ã:
        food.put("–Ø–±–ª–æ–∫–∏", 52);
        food.put("–ê–≤–æ–∫–∞–¥–æ", 160);
        food.put("–ú–æ–ª–æ–∫–æ", 50);
        food.put("–°—ã—Ä", 357);
        food.put("–ü–∏—Ü—Ü–∞", 275);

        // –í—ã–≤–µ–¥–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∫–æ–Ω—Å–æ–ª—å:
        System.out.println("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞: " + food + ".");

        // –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—Å–µ –ª—é–±–∏–º—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ:
        boolean hasApples = food.containsKey("–Ø–±–ª–æ–∫–∏");
        System.out.println("–ê —É –Ω–∞—Å –µ—Å—Ç—å —è–±–ª–æ–∫–∏? ü§î –û—Ç–≤–µ—Ç: " + hasApples + " ü•≥.");

        boolean hasCoconuts = food.containsKey("–ö–æ–∫–æ—Å");
        System.out.println("–ê —É –Ω–∞—Å –µ—Å—Ç—å –∫–æ–∫–æ—Å—ã? ü§î –û—Ç–≤–µ—Ç: " + hasCoconuts + " üò±. –°—Ä–æ—á–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–∫–æ—Å–æ–≤—ã–π –æ—Ç—Ä—è–¥!");

        // –ê —Å–∫–æ–ª—å–∫–æ –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π –≤ –ø–∏—Ü—Ü–µ? ü§ì –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏–º ...
        int caloriesInPizza = food.get("–ü–∏—Ü—Ü–∞");
        System.out.println("–ü–∏—Ü—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç " + caloriesInPizza + " –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π –Ω–∞ 100 –≥.");

        // –•–º, –∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ? üßê –°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º ...
        System.out.println("–°–µ–π—á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ " + food.size() + " –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");

        // –ê –Ω–µ —Å—ä–µ—Å—Ç—å –ª–∏ —è–±–ª–æ–∫–æ? üçè
        food.remove("–Ø–±–ª–æ–∫–∏");
        System.out.println("–°–µ–π—á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ " + food.size() + " –ø—Ä–æ–¥—É–∫—Ç–∞. –ö–∞–∂–µ—Ç—Å—è, –ø–æ—Ä–∞ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø–∞—Å—ã! üõí");

        // –í—ã–≤–µ–¥–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª—å:
        for (Map.Entry<String, Integer> entry : food.entrySet()) {
            System.out.println("'" + entry.getKey() + "' —Å–æ–¥–µ—Ä–∂–∏—Ç " + entry.getValue() + " –∫–∏–ª–æ–∫–∞–ª–æ—Ä–∏–π –≤ 100 –≥.");
        }

        food.clear(); // –£–¥–∞–ª–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ö–µ—à-—Ç–∞–±–ª–∏—Ü—ã.

        // –ö–æ–≥–¥–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –ø—É—Å—Ç–æ ...
        System.out.println("–°–µ–π—á–∞—Å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ " + food.size() + " –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");

        if (food.isEmpty()) {
            System.out.println("–ù–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å! üòØ –°—Ä–æ—á–Ω–æ –∑–∞–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É! üõç");
        } else {
            System.out.println("–í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ! üòé");
        }
    }
}
